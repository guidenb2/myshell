myshell

NAME
   myshell

AUTHOR
   Ben Guiden, 19310046

SYNOPSIS
   ./myshell [BATCHFILE] [I/O REDIRECTION]
   Batchfile and i/o redirection are optional.

DESCRIPTION
   myshell is shell program that allows the user to input commands. The program is a command line interpreter. The user can either enter commands in the command line or from a batchfile. A batchfile must end with a blank newline.
   By default, a command runs in the foreground but can also be run in the background.

COMMANDS
   cd [DIR] - change to the directory DIR. If no directory is entered for DIR, the current working directory is printed. The command also checks if DIR exists.

   clr - clears the screen

   dir - list all of the files and directories in the current directory 

   environ - lists all the environment strings

   echo [ARG] - prints ARG.

   help - displays the user manual using the more filter.

   pause - pause the shell program until the 'Enter' key is pressed.

   calender - displays a calender of the current month with the current date highlighted.

   quit - exit the shell program.

I/O REDIRECTION
   This is the redirecting of standard input or standard output. Standard input usually comes from the command line but can be taken from a file if the following is provided: COMMANDNAME < input.txt. This would make our stdin come from input.txt rather than from the command line. Input is taken until the EOF is reached. If input.txt contained "The Long And Winding Road", echo < input.txt would print "The Long And Winding Road". 
   Output can be redirected to by: COMMANDNAME > output.txt OR COMMANDNAME >> output.txt. Output would be redirected to the file output.txt and wouldn't be outputted to the terminal. The symbol '>' overwrites the contents of output.txt but the symbol '>>' appends to output.txt. Append means that the output would just be added to the end of output.txt.
   Allowing the manipulation of the different I/O streams in your environment will greatly increase the productivity of a program[1]. I/O redirection should be a basic requirement in any shell program.

ENVIRONMENT
   The command environ is used to display all of the environment variables. Environment variables are variables set outside the program. An environment variable has a name and a value. These values can be used in programs.
   Values of environment variables can be changed inside programs. Such as how PWD variable is changed when the cd command is used in this shell. New environment variables can also be added in programs. This also happens in this program as a environment variable myshell is created.

BACKGROUND EXECUTION
   When a command is run, it is run in a process. Each process has a unique process ID which is used to identify it. A process can be executed in either the foreground or background.
   If a process is run in the foreground, the parent process must wait for the child process to finish before launching any new processes.
   If a process is run in the background, the parent process does NOT wait for it to finish before receiving more user input. A background process is a process that is run independently[2]. If a terminal launches a background process, the same terminal can execute other commands without waiting for the background process to finish.
   To run a command in the background use '&' after the command, i.e. COMMANDNAME [ARG] &

REFERENCES
   1. David Collazo, 2014. An Introduction to Linux I/O Redirection. Available at: https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-i-o-redirection
   2. Mario Giuffrida. Background Process in Linux: Definition & Manipulation. The free version available at: https://study.com/academy/lesson/background-processes-in-linux-definition-manipulation.html
   3. tutorialspoint. C library function - freopen(). Available at: https://www.tutorialspoint.com/c_standard_library/c_function_freopen.htm
   4. Jim Medlock, 2018. An Introduction to Environment Variables and How to Use Them. Available at: https://medium.com/chingu/an-introduction-to-environment-variables-and-how-to-use-them-f602f66d15fa
   5. tutorialspoint. Unix / Linux - Process Management. Available at: https://www.tutorialspoint.com/unix/unix-processes.htm#:~:text=When%20you%20execute%20a%20program,special%20environment%20for%20that%20program.&text=A%20process%2C%20in%20simple%20terms,pid%20or%20the%20process%20ID.

INFO
   author: Ben Guiden
   student number: 19310046
   email: ben.guiden2@mail.dcu.ie
   I have read and understood the DCU Academic Integrity and Plagiarism Policy. All work is my own unless indicated otherwise.